{
  "version": 3,
  "sources": ["../../../../../src/cli/lib/localDeployment/run.ts"],
  "sourcesContent": ["import AdmZip from \"adm-zip\";\nimport {\n  Context,\n  logFinishedStep,\n  startLogProgress,\n  logVerbose,\n  logMessage,\n} from \"../../../bundler/context.js\";\nimport {\n  binariesDir,\n  binaryZip,\n  deploymentStateDir,\n  executablePath,\n  versionedBinaryDir,\n} from \"./filePaths.js\";\nimport path from \"path\";\nimport child_process from \"child_process\";\nimport { promisify } from \"util\";\nimport { Readable } from \"stream\";\nimport { nodeFs } from \"../../../bundler/fs.js\";\nimport detect from \"detect-port\";\nimport { SENTRY_DSN } from \"../utils/sentry.js\";\nimport { createHash } from \"crypto\";\nimport { components } from \"@octokit/openapi-types\";\nimport { recursivelyDelete } from \"../fsUtils.js\";\nimport { LocalDeploymentError } from \"./errors.js\";\nimport ProgressBar from \"progress\";\n\nconst LOCAL_BACKEND_INSTANCE_SECRET =\n  \"4361726e697461732c206c69746572616c6c79206d65616e696e6720226c6974\";\n\ntype GitHubRelease = components[\"schemas\"][\"release\"];\n\nexport async function ensureBackendBinaryDownloaded(\n  ctx: Context,\n  version: { kind: \"latest\" } | { kind: \"version\"; version: string },\n): Promise<{ binaryPath: string; version: string }> {\n  if (version.kind === \"version\") {\n    return _ensureBackendBinaryDownloaded(ctx, version.version);\n  }\n  const latestVersionWithBinary = await findLatestVersionWithBinary(ctx);\n  return _ensureBackendBinaryDownloaded(ctx, latestVersionWithBinary);\n}\n\nasync function _ensureBackendBinaryDownloaded(\n  ctx: Context,\n  version: string,\n): Promise<{ binaryPath: string; version: string }> {\n  logVerbose(ctx, `Ensuring backend binary downloaded for version ${version}`);\n  const existingDownload = await checkForExistingDownload(ctx, version);\n  if (existingDownload !== null) {\n    logVerbose(ctx, `Using existing download at ${existingDownload}`);\n    return {\n      binaryPath: existingDownload,\n      version,\n    };\n  }\n  const binaryPath = await downloadBinary(ctx, version);\n  return { version, binaryPath };\n}\n\n/**\n * Parse the HTTP header like\n * link: <https://api.github.com/repositories/1300192/issues?page=2>; rel=\"prev\", <https://api.github.com/repositories/1300192/issues?page=4>; rel=\"next\", <https://api.github.com/repositories/1300192/issues?page=515>; rel=\"last\", <https://api.github.com/repositories/1300192/issues?page=1>; rel=\"first\"\n * into an object.\n * https://docs.github.com/en/rest/using-the-rest-api/using-pagination-in-the-rest-api?apiVersion=2022-11-28#using-link-headers\n */\nfunction parseLinkHeader(header: string): {\n  prev?: string;\n  next?: string;\n  first?: string;\n  last?: string;\n} {\n  const links: { [key: string]: string } = {};\n  const parts = header.split(\",\");\n  for (const part of parts) {\n    const section = part.split(\";\");\n    if (section.length !== 2) {\n      continue;\n    }\n    const url = section[0].trim().slice(1, -1);\n    const rel = section[1].trim().slice(5, -1);\n    links[rel] = url;\n  }\n  return links;\n}\n\n/**\n * Finds the latest version of the convex backend that has a binary that works\n * on this platform.\n */\nexport async function findLatestVersionWithBinary(\n  ctx: Context,\n): Promise<string> {\n  const targetName = getDownloadPath();\n  logVerbose(\n    ctx,\n    `Finding latest stable release containing binary named ${targetName}`,\n  );\n  let latestVersion: string | undefined;\n  let nextUrl =\n    \"https://api.github.com/repos/get-convex/convex-backend/releases?per_page=30\";\n\n  try {\n    while (nextUrl) {\n      const response = await fetch(nextUrl);\n\n      if (!response.ok) {\n        const text = await response.text();\n        return await ctx.crash({\n          exitCode: 1,\n          errorType: \"fatal\",\n          printedMessage: `GitHub API returned ${response.status}: ${text}`,\n          errForSentry: new LocalDeploymentError(\n            `GitHub API returned ${response.status}: ${text}`,\n          ),\n        });\n      }\n\n      const releases = (await response.json()) as GitHubRelease[];\n      if (releases.length === 0) {\n        break;\n      }\n\n      for (const release of releases) {\n        // Track the latest stable version we've seen even if it doesn't have our binary\n        if (!latestVersion && !release.prerelease && !release.draft) {\n          latestVersion = release.tag_name;\n          logVerbose(ctx, `Latest stable version is ${latestVersion}`);\n        }\n\n        // Only consider stable releases\n        if (!release.prerelease && !release.draft) {\n          // Check if this release has our binary\n          if (release.assets.find((asset) => asset.name === targetName)) {\n            logVerbose(\n              ctx,\n              `Latest stable version with appropriate binary is ${release.tag_name}`,\n            );\n            return release.tag_name;\n          }\n\n          logVerbose(\n            ctx,\n            `Version ${release.tag_name} does not contain a ${targetName}, checking previous version`,\n          );\n        }\n      }\n\n      // Get the next page URL from the Link header\n      const linkHeader = response.headers.get(\"Link\");\n      if (!linkHeader) {\n        break;\n      }\n\n      const links = parseLinkHeader(linkHeader);\n      nextUrl = links[\"next\"] || \"\";\n    }\n\n    // If we get here, we didn't find any suitable releases\n    if (!latestVersion) {\n      return await ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage:\n          \"Found no non-draft, non-prerelease convex backend releases.\",\n        errForSentry: new LocalDeploymentError(\n          \"Found no non-draft, non-prerelease convex backend releases.\",\n        ),\n      });\n    }\n\n    // If we found stable releases but none had our binary\n    const message = `Failed to find a convex backend release that contained ${targetName}.`;\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: message,\n      errForSentry: new LocalDeploymentError(message),\n    });\n  } catch (e) {\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: \"Failed to get latest convex backend releases\",\n      errForSentry: new LocalDeploymentError(e?.toString()),\n    });\n  }\n}\n\n/**\n *\n * @param ctx\n * @param version\n * @returns The binary path if it exists, or null\n */\nasync function checkForExistingDownload(\n  ctx: Context,\n  version: string,\n): Promise<string | null> {\n  const destDir = versionedBinaryDir(version);\n  if (!ctx.fs.exists(destDir)) {\n    return null;\n  }\n  const p = executablePath(version);\n  if (!ctx.fs.exists(p)) {\n    // This directory isn't what we expected. Remove it.\n    recursivelyDelete(ctx, destDir, { force: true });\n    return null;\n  }\n  await makeExecutable(p);\n  return p;\n}\n\nasync function downloadBinary(ctx: Context, version: string): Promise<string> {\n  const downloadPath = getDownloadPath();\n  // Note: We validate earlier that there's a binary for this platform at the specified version,\n  // so in practice, we should never hit errors here.\n  if (downloadPath === null) {\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: `Unsupported platform ${process.platform} and architecture ${process.arch} for local deployment.`,\n    });\n  }\n  const url = `https://github.com/get-convex/convex-backend/releases/download/${version}/${downloadPath}`;\n  const response = await fetch(url);\n  const contentLength = parseInt(\n    response.headers.get(\"content-length\") ?? \"\",\n    10,\n  );\n  let progressBar: ProgressBar | null = null;\n  if (!isNaN(contentLength) && contentLength !== 0 && process.stdout.isTTY) {\n    progressBar = startLogProgress(\n      ctx,\n      \"Downloading Convex backend binary [:bar] :percent :etas\",\n      {\n        width: 40,\n        total: contentLength,\n        clear: true,\n      },\n    );\n  }\n  if (response.status !== 200) {\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: `Binary not found at ${url}.`,\n    });\n  }\n  logMessage(ctx, \"Downloading convex backend\");\n  if (!ctx.fs.exists(binariesDir())) {\n    ctx.fs.mkdir(binariesDir(), { recursive: true });\n  }\n  const zipLocation = binaryZip();\n  if (ctx.fs.exists(zipLocation)) {\n    ctx.fs.unlink(zipLocation);\n  }\n  const readable = Readable.fromWeb(response.body! as any);\n  await nodeFs.writeFileStream(zipLocation, readable, (chunk: any) => {\n    if (progressBar !== null) {\n      progressBar.tick(chunk.length);\n    }\n  });\n  if (progressBar) {\n    progressBar.terminate();\n    logFinishedStep(ctx, \"Downloaded Convex backend binary\");\n  }\n  logVerbose(ctx, \"Downloaded zip file\");\n\n  const zip = new AdmZip(zipLocation);\n  const versionDir = versionedBinaryDir(version);\n  zip.extractAllTo(versionDir, true);\n  logVerbose(ctx, \"Extracted from zip file\");\n  const p = executablePath(version);\n  await makeExecutable(p);\n  logVerbose(ctx, \"Marked as executable\");\n  return p;\n}\n\nasync function makeExecutable(p: string) {\n  switch (process.platform) {\n    case \"darwin\":\n    case \"linux\": {\n      await promisify(child_process.exec)(`chmod +x ${p}`);\n    }\n  }\n}\n\nexport async function runLocalBackend(\n  ctx: Context,\n  args: {\n    ports: {\n      cloud: number;\n      site: number;\n    };\n    deploymentName: string;\n    binaryPath: string;\n  },\n): Promise<{\n  cleanupHandle: string;\n}> {\n  const { ports } = args;\n  const deploymentDir = deploymentStateDir(args.deploymentName);\n  ctx.fs.mkdir(deploymentDir, { recursive: true });\n  const deploymentNameSha = createHash(\"sha256\")\n    .update(args.deploymentName)\n    .digest(\"hex\");\n  const commandArgs = [\n    \"--port\",\n    ports.cloud.toString(),\n    \"--site-proxy-port\",\n    ports.site.toString(),\n    \"--sentry-identifier\",\n    deploymentNameSha,\n    \"--instance-name\",\n    args.deploymentName,\n    \"--instance-secret\",\n    LOCAL_BACKEND_INSTANCE_SECRET,\n    \"--local-storage\",\n    path.join(deploymentDir, \"convex_local_storage\"),\n    \"--beacon-tag\",\n    \"cli-local-dev\",\n    path.join(deploymentDir, \"convex_local_backend.sqlite3\"),\n  ];\n\n  // Check that binary works by running with --help\n  try {\n    const result = child_process.spawnSync(args.binaryPath, [\n      ...commandArgs,\n      \"--help\",\n    ]);\n    if (result.status === 3221225781) {\n      const message =\n        \"Local backend exited because shared libraries are missing. These may include libraries installed via 'Microsoft Visual C++ Redistributable for Visual Studio.'\";\n      return ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage: message,\n        errForSentry: new LocalDeploymentError(\n          \"Local backend exited with code 3221225781\",\n        ),\n      });\n    } else if (result.status !== 0) {\n      const message = `Failed to run backend binary, exit code ${result.status}, error: ${result.stderr.toString()}`;\n      return ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage: message,\n        errForSentry: new LocalDeploymentError(message),\n      });\n    }\n  } catch (e) {\n    const message = `Failed to run backend binary: ${(e as any).toString()}`;\n    return ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: message,\n      errForSentry: new LocalDeploymentError(message),\n    });\n  }\n  const commandStr = `${args.binaryPath} ${commandArgs.join(\" \")}`;\n  logVerbose(ctx, `Starting local backend: \\`${commandStr}\\``);\n  const p = child_process\n    .spawn(args.binaryPath, commandArgs, {\n      stdio: \"ignore\",\n      env: {\n        ...process.env,\n        SENTRY_DSN: SENTRY_DSN,\n      },\n    })\n    .on(\"exit\", (code) => {\n      const why = code === null ? \"from signal\" : `with code ${code}`;\n      logVerbose(\n        ctx,\n        `Local backend exited ${why}, full command \\`${commandStr}\\``,\n      );\n    });\n  const cleanupHandle = ctx.registerCleanup(async () => {\n    logVerbose(ctx, `Stopping local backend on port ${ports.cloud}`);\n    p.kill(\"SIGTERM\");\n  });\n\n  await ensureBackendRunning(ctx, {\n    cloudPort: ports.cloud,\n    deploymentName: args.deploymentName,\n    maxTimeSecs: 10,\n  });\n\n  return {\n    cleanupHandle,\n  };\n}\n\n/** Crash if correct local backend is not currently listening on the expected port. */\nexport async function assertLocalBackendRunning(\n  ctx: Context,\n  args: {\n    url: string;\n    deploymentName: string;\n  },\n): Promise<void> {\n  logVerbose(ctx, `Checking local backend at ${args.url} is running`);\n  try {\n    const resp = await fetch(`${args.url}/instance_name`);\n    if (resp.status === 200) {\n      const text = await resp.text();\n      if (text !== args.deploymentName) {\n        return await ctx.crash({\n          exitCode: 1,\n          errorType: \"fatal\",\n          printedMessage: `A different local backend ${text} is running at ${args.url}`,\n        });\n      } else {\n        return;\n      }\n    } else {\n      return await ctx.crash({\n        exitCode: 1,\n        errorType: \"fatal\",\n        printedMessage: `Error response code received from local backend ${resp.status} ${resp.statusText}`,\n      });\n    }\n  } catch {\n    return await ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage: `Local backend isn't running. (it's not listening at ${args.url})\\nRun \\`npx convex dev\\` in another terminal first.`,\n    });\n  }\n}\n\n/** Wait for up to maxTimeSecs for the correct local backend to be running on the expected port. */\nexport async function ensureBackendRunning(\n  ctx: Context,\n  args: {\n    cloudPort: number;\n    deploymentName: string;\n    maxTimeSecs: number;\n  },\n): Promise<void> {\n  logVerbose(\n    ctx,\n    `Ensuring backend running on port ${args.cloudPort} is running`,\n  );\n  const deploymentUrl = localDeploymentUrl(args.cloudPort);\n  let timeElapsedSecs = 0;\n  let hasShownWaiting = false;\n  while (timeElapsedSecs <= args.maxTimeSecs) {\n    if (!hasShownWaiting && timeElapsedSecs > 2) {\n      logMessage(ctx, \"waiting for local backend to start...\");\n      hasShownWaiting = true;\n    }\n    try {\n      const resp = await fetch(`${deploymentUrl}/instance_name`);\n      if (resp.status === 200) {\n        const text = await resp.text();\n        if (text !== args.deploymentName) {\n          return await ctx.crash({\n            exitCode: 1,\n            errorType: \"fatal\",\n            printedMessage: `A different local backend ${text} is running on selected port ${args.cloudPort}`,\n          });\n        } else {\n          // The backend is running!\n          return;\n        }\n      } else {\n        await new Promise((resolve) => setTimeout(resolve, 500));\n        timeElapsedSecs += 0.5;\n      }\n    } catch {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      timeElapsedSecs += 0.5;\n    }\n  }\n  const message = `Local backend did not start on port ${args.cloudPort} within ${args.maxTimeSecs} seconds.`;\n  return await ctx.crash({\n    exitCode: 1,\n    errorType: \"fatal\",\n    printedMessage: message,\n    errForSentry: new LocalDeploymentError(message),\n  });\n}\n\nexport async function ensureBackendStopped(\n  ctx: Context,\n  args: {\n    ports: {\n      cloud: number;\n      site?: number;\n    };\n    maxTimeSecs: number;\n    deploymentName: string;\n    // Whether to allow a deployment with a different name to run on this port\n    allowOtherDeployments: boolean;\n  },\n) {\n  logVerbose(\n    ctx,\n    `Ensuring backend running on port ${args.ports.cloud} is stopped`,\n  );\n  let timeElapsedSecs = 0;\n  while (timeElapsedSecs < args.maxTimeSecs) {\n    const cloudPort = await detect(args.ports.cloud);\n    const sitePort =\n      args.ports.site === undefined ? undefined : await detect(args.ports.site);\n    // Both ports are free\n    if (cloudPort === args.ports.cloud && sitePort === args.ports.site) {\n      return;\n    }\n    try {\n      const instanceNameResp = await fetch(\n        `${localDeploymentUrl(args.ports.cloud)}/instance_name`,\n      );\n      if (instanceNameResp.ok) {\n        const instanceName = await instanceNameResp.text();\n        if (instanceName !== args.deploymentName) {\n          if (args.allowOtherDeployments) {\n            return;\n          }\n          return await ctx.crash({\n            exitCode: 1,\n            errorType: \"fatal\",\n            printedMessage: `A different local backend ${instanceName} is running on selected port ${args.ports.cloud}`,\n          });\n        }\n      }\n    } catch (error: any) {\n      logVerbose(ctx, `Error checking if backend is running: ${error.message}`);\n      // Backend is probably not running\n      continue;\n    }\n    await new Promise((resolve) => setTimeout(resolve, 500));\n    timeElapsedSecs += 0.5;\n  }\n  return ctx.crash({\n    exitCode: 1,\n    errorType: \"fatal\",\n    printedMessage: `A local backend is still running on port ${args.ports.cloud}. Please stop it and run this command again.`,\n  });\n}\n\nexport function localDeploymentUrl(cloudPort: number): string {\n  return `http://127.0.0.1:${cloudPort}`;\n}\n\n/**\n * Get the artifact name, composed of the target convex-local-backend and\n * the Rust \"target triple\" appropriate for the current machine.\n **/\nfunction getDownloadPath() {\n  switch (process.platform) {\n    case \"darwin\":\n      if (process.arch === \"arm64\") {\n        return \"convex-local-backend-aarch64-apple-darwin.zip\";\n      } else if (process.arch === \"x64\") {\n        return \"convex-local-backend-x86_64-apple-darwin.zip\";\n      }\n      break;\n    case \"linux\":\n      if (process.arch === \"arm64\") {\n        return \"convex-local-backend-aarch64-unknown-linux-gnu.zip\";\n      } else if (process.arch === \"x64\") {\n        return \"convex-local-backend-x86_64-unknown-linux-gnu.zip\";\n      }\n      break;\n    case \"win32\":\n      return \"convex-local-backend-x86_64-pc-windows-msvc.zip\";\n  }\n  return null;\n}\n"],
  "mappings": "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",
  "names": []
}
