{
  "version": 3,
  "sources": ["../../../src/cli/deploy.ts"],
  "sourcesContent": ["import chalk from \"chalk\";\nimport { Command, Option } from \"@commander-js/extra-typings\";\nimport {\n  Context,\n  logFinishedStep,\n  logMessage,\n  oneoffContext,\n  showSpinner,\n} from \"../bundler/context.js\";\nimport {\n  fetchDeploymentCredentialsWithinCurrentProject,\n  deploymentSelectionFromOptions,\n  projectSelection,\n  storeAdminKeyEnvVar,\n} from \"./lib/api.js\";\nimport {\n  gitBranchFromEnvironment,\n  isNonProdBuildEnvironment,\n  suggestedEnvVarName,\n} from \"./lib/envvars.js\";\nimport { PushOptions } from \"./lib/push.js\";\nimport {\n  CONVEX_DEPLOY_KEY_ENV_VAR_NAME,\n  bigBrainAPI,\n  getConfiguredDeployment,\n  readAdminKeyFromEnvVar,\n} from \"./lib/utils/utils.js\";\nimport { runFunctionAndLog } from \"./lib/run.js\";\nimport { usageStateWarning } from \"./lib/usage.js\";\nimport {\n  deploymentTypeFromAdminKey,\n  getConfiguredDeploymentFromEnvVar,\n  isPreviewDeployKey,\n} from \"./lib/deployment.js\";\nimport { runPush } from \"./lib/components.js\";\nimport { promptYesNo } from \"./lib/utils/prompts.js\";\nimport { deployToDeployment, runCommand } from \"./lib/deploy2.js\";\n\nexport const deploy = new Command(\"deploy\")\n  .summary(\"Deploy to your prod deployment\")\n  .description(\n    \"Deploy to your deployment. By default, this deploys to your prod deployment.\\n\\n\" +\n      \"Deploys to a preview deployment if the `CONVEX_DEPLOY_KEY` environment variable is set to a Preview Deploy Key.\",\n  )\n  .allowExcessArguments(false)\n  .addDeployOptions()\n  .addOption(\n    new Option(\n      \"--preview-run <functionName>\",\n      \"Function to run if deploying to a preview deployment. This is ignored if deploying to a production deployment.\",\n    ),\n  )\n  .addOption(\n    new Option(\n      \"--preview-create <name>\",\n      \"The name to associate with this deployment if deploying to a newly created preview deployment. Defaults to the current Git branch name in Vercel, Netlify and Github CI. This is ignored if deploying to a production deployment.\",\n    ).conflicts(\"preview-name\"),\n  )\n  .addOption(\n    new Option(\n      \"--check-build-environment <mode>\",\n      \"Whether to check for a non-production build environment before deploying to a production Convex deployment.\",\n    )\n      .choices([\"enable\", \"disable\"] as const)\n      .default(\"enable\" as const)\n      .hideHelp(),\n  )\n  // Hidden options to pass in admin key and url for tests and local development\n  .addOption(new Option(\"--admin-key <adminKey>\").hideHelp())\n  .addOption(new Option(\"--url <url>\").hideHelp())\n  .addOption(\n    new Option(\n      \"--preview-name <name>\",\n      \"[deprecated] Use `--preview-create` instead. The name to associate with this deployment if deploying to a preview deployment.\",\n    )\n      .hideHelp()\n      .conflicts(\"preview-create\"),\n  )\n  .addOption(new Option(\"--partition-id <id>\").hideHelp())\n  .showHelpAfterError()\n  .action(async (cmdOptions) => {\n    const ctx = oneoffContext();\n\n    storeAdminKeyEnvVar(cmdOptions.adminKey);\n    const configuredDeployKey = readAdminKeyFromEnvVar() ?? null;\n    if (\n      cmdOptions.checkBuildEnvironment === \"enable\" &&\n      isNonProdBuildEnvironment() &&\n      configuredDeployKey !== null &&\n      deploymentTypeFromAdminKey(configuredDeployKey) === \"prod\"\n    ) {\n      await ctx.crash({\n        exitCode: 1,\n        errorType: \"invalid filesystem data\",\n        printedMessage: `Detected a non-production build environment and \"${CONVEX_DEPLOY_KEY_ENV_VAR_NAME}\" for a production Convex deployment.\\n\n          This is probably unintentional.\n          `,\n      });\n    }\n\n    await usageStateWarning(ctx);\n\n    if (\n      configuredDeployKey !== null &&\n      isPreviewDeployKey(configuredDeployKey)\n    ) {\n      if (cmdOptions.previewName !== undefined) {\n        await ctx.crash({\n          exitCode: 1,\n          errorType: \"fatal\",\n          printedMessage:\n            \"The `--preview-name` flag has been deprecated in favor of `--preview-create`. Please re-run the command using `--preview-create` instead.\",\n        });\n      }\n      await deployToNewPreviewDeployment(ctx, {\n        ...cmdOptions,\n        configuredDeployKey,\n      });\n    } else {\n      await deployToExistingDeployment(ctx, cmdOptions);\n    }\n  });\n\nasync function deployToNewPreviewDeployment(\n  ctx: Context,\n  options: {\n    configuredDeployKey: string;\n    dryRun?: boolean | undefined;\n    previewCreate?: string | undefined;\n    previewRun?: string | undefined;\n    cmdUrlEnvVarName?: string | undefined;\n    cmd?: string | undefined;\n    verbose?: boolean | undefined;\n    typecheck: \"enable\" | \"try\" | \"disable\";\n    typecheckComponents: boolean;\n    codegen: \"enable\" | \"disable\";\n\n    debug?: boolean | undefined;\n    debugBundlePath?: string | undefined;\n    partitionId?: string | undefined;\n  },\n) {\n  const previewName = options.previewCreate ?? gitBranchFromEnvironment();\n  if (previewName === null) {\n    await ctx.crash({\n      exitCode: 1,\n      errorType: \"fatal\",\n      printedMessage:\n        \"`npx convex deploy` to a preview deployment could not determine the preview name. Provide one using `--preview-create`\",\n    });\n  }\n\n  if (options.dryRun) {\n    logFinishedStep(\n      ctx,\n      `Would have claimed preview deployment for \"${previewName}\"`,\n    );\n    await runCommand(ctx, {\n      cmdUrlEnvVarName: options.cmdUrlEnvVarName,\n      cmd: options.cmd,\n      dryRun: !!options.dryRun,\n      url: \"https://<PREVIEW DEPLOYMENT>.convex.cloud\",\n    });\n    logFinishedStep(\n      ctx,\n      `Would have deployed Convex functions to preview deployment for \"${previewName}\"`,\n    );\n    if (options.previewRun !== undefined) {\n      logMessage(ctx, `Would have run function \"${options.previewRun}\"`);\n    }\n    return;\n  }\n\n  const data = await bigBrainAPI({\n    ctx,\n    method: \"POST\",\n    url: \"claim_preview_deployment\",\n    data: {\n      projectSelection: await projectSelection(\n        ctx,\n        (await getConfiguredDeployment(ctx)).name,\n        options.configuredDeployKey,\n      ),\n      identifier: previewName,\n      partitionId: options.partitionId\n        ? parseInt(options.partitionId)\n        : undefined,\n    },\n  });\n\n  const previewAdminKey = data.adminKey;\n  const previewUrl = data.instanceUrl;\n\n  await runCommand(ctx, { ...options, url: previewUrl });\n\n  const pushOptions: PushOptions = {\n    adminKey: previewAdminKey,\n    verbose: !!options.verbose,\n    dryRun: false,\n    typecheck: options.typecheck,\n    typecheckComponents: options.typecheckComponents,\n    debug: !!options.debug,\n    debugBundlePath: options.debugBundlePath,\n    codegen: options.codegen === \"enable\",\n    url: previewUrl,\n    liveComponentSources: false,\n  };\n  showSpinner(ctx, `Deploying to ${previewUrl}...`);\n  await runPush(ctx, pushOptions);\n  logFinishedStep(ctx, `Deployed Convex functions to ${previewUrl}`);\n\n  if (options.previewRun !== undefined) {\n    await runFunctionAndLog(ctx, {\n      deploymentUrl: previewUrl,\n      adminKey: previewAdminKey,\n      functionName: options.previewRun,\n      argsString: \"{}\",\n      componentPath: undefined,\n      callbacks: {\n        onSuccess: () => {\n          logFinishedStep(\n            ctx,\n            `Finished running function \"${options.previewRun}\"`,\n          );\n        },\n      },\n    });\n  }\n}\n\nasync function deployToExistingDeployment(\n  ctx: Context,\n  options: {\n    verbose?: boolean | undefined;\n    dryRun?: boolean | undefined;\n    yes?: boolean | undefined;\n    typecheck: \"enable\" | \"try\" | \"disable\";\n    typecheckComponents: boolean;\n    codegen: \"enable\" | \"disable\";\n    cmd?: string | undefined;\n    cmdUrlEnvVarName?: string | undefined;\n\n    debugBundlePath?: string | undefined;\n    debug?: boolean | undefined;\n    adminKey?: string | undefined;\n    url?: string | undefined;\n    writePushRequest?: string | undefined;\n    liveComponentSources?: boolean | undefined;\n    partitionId?: string | undefined;\n  },\n) {\n  const deploymentSelection = deploymentSelectionFromOptions({\n    ...options,\n    prod: true,\n  });\n  const { name: configuredDeploymentName, type: configuredDeploymentType } =\n    getConfiguredDeploymentFromEnvVar();\n  const { adminKey, url, deploymentName, deploymentType } =\n    await fetchDeploymentCredentialsWithinCurrentProject(\n      ctx,\n      deploymentSelection,\n    );\n  if (\n    deploymentSelection.kind !== \"deployKey\" &&\n    deploymentName !== undefined &&\n    deploymentType !== undefined &&\n    configuredDeploymentName !== null\n  ) {\n    const shouldPushToProd =\n      deploymentName === configuredDeploymentName ||\n      (options.yes ??\n        (await askToConfirmPush(\n          ctx,\n          {\n            configuredName: configuredDeploymentName,\n            configuredType: configuredDeploymentType,\n            requestedName: deploymentName,\n            requestedType: deploymentType,\n          },\n          url,\n        )));\n    if (!shouldPushToProd) {\n      await ctx.crash({\n        exitCode: 1,\n        printedMessage: null,\n        errorType: \"fatal\",\n      });\n    }\n  }\n\n  await deployToDeployment(ctx, { url, adminKey }, options);\n}\n\nasync function askToConfirmPush(\n  ctx: Context,\n  deployment: {\n    configuredName: string;\n    configuredType: string | null;\n    requestedName: string;\n    requestedType: string;\n  },\n  prodUrl: string,\n) {\n  logMessage(\n    ctx,\n    `\\\nYou're currently developing against your ${chalk.bold(\n      deployment.configuredType ?? \"dev\",\n    )} deployment\n\n  ${deployment.configuredName} (set in CONVEX_DEPLOYMENT)\n\nYour ${chalk.bold(deployment.requestedType)} deployment ${chalk.bold(\n      deployment.requestedName,\n    )} serves traffic at:\n\n  ${(await suggestedEnvVarName(ctx)).envVar}=${chalk.bold(prodUrl)}\n\nMake sure that your published client is configured with this URL (for instructions see https://docs.convex.dev/hosting)\\n`,\n  );\n  return promptYesNo(ctx, {\n    message: `Do you want to push your code to your ${deployment.requestedType} deployment ${deployment.requestedName} now?`,\n    default: true,\n  });\n}\n"],
  "mappings": "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",
  "names": ["chalk"]
}
