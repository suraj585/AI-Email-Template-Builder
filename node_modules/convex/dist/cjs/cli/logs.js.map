{
  "version": 3,
  "sources": ["../../../src/cli/logs.ts"],
  "sourcesContent": ["import { Command } from \"@commander-js/extra-typings\";\nimport { oneoffContext } from \"../bundler/context.js\";\nimport {\n  deploymentSelectionFromOptions,\n  fetchDeploymentCredentialsProvisionProd,\n} from \"./lib/api.js\";\nimport { actionDescription } from \"./lib/command.js\";\nimport { logsForDeployment } from \"./lib/logs.js\";\n\nexport const logs = new Command(\"logs\")\n  .summary(\"Watch logs from your deployment\")\n  .description(\n    \"Stream function logs from your Convex deployment.\\nBy default, this streams from your project's dev deployment.\",\n  )\n  .allowExcessArguments(false)\n  .addLogsOptions()\n  .addDeploymentSelectionOptions(actionDescription(\"Watch logs from\"))\n  .showHelpAfterError()\n  .action(async (cmdOptions) => {\n    const ctx = oneoffContext();\n\n    const deploymentSelection = deploymentSelectionFromOptions(cmdOptions);\n    const credentials = await fetchDeploymentCredentialsProvisionProd(\n      ctx,\n      deploymentSelection,\n    );\n    const deploymentName = credentials.deploymentName\n      ? ` ${credentials.deploymentName}`\n      : \"\";\n    const deploymentNotice = ` for ${cmdOptions.prod ? \"production\" : \"dev\"} deployment${deploymentName}`;\n    await logsForDeployment(ctx, credentials, {\n      history: cmdOptions.history,\n      success: cmdOptions.success,\n      deploymentNotice,\n    });\n  });\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAwB;AACxB,qBAA8B;AAC9B,iBAGO;AACP,qBAAkC;AAClC,kBAAkC;AAE3B,MAAM,OAAO,IAAI,6BAAQ,MAAM,EACnC,QAAQ,iCAAiC,EACzC;AAAA,EACC;AACF,EACC,qBAAqB,KAAK,EAC1B,eAAe,EACf,kCAA8B,kCAAkB,iBAAiB,CAAC,EAClE,mBAAmB,EACnB,OAAO,OAAO,eAAe;AAC5B,QAAM,UAAM,8BAAc;AAE1B,QAAM,0BAAsB,2CAA+B,UAAU;AACrE,QAAM,cAAc,UAAM;AAAA,IACxB;AAAA,IACA;AAAA,EACF;AACA,QAAM,iBAAiB,YAAY,iBAC/B,IAAI,YAAY,cAAc,KAC9B;AACJ,QAAM,mBAAmB,QAAQ,WAAW,OAAO,eAAe,KAAK,cAAc,cAAc;AACnG,YAAM,+BAAkB,KAAK,aAAa;AAAA,IACxC,SAAS,WAAW;AAAA,IACpB,SAAS,WAAW;AAAA,IACpB;AAAA,EACF,CAAC;AACH,CAAC;",
  "names": []
}
