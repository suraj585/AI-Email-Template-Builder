"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var selfHost_exports = {};
__export(selfHost_exports, {
  selfHost: () => selfHost
});
module.exports = __toCommonJS(selfHost_exports);
var dotenv = __toESM(require("dotenv"), 1);
var import_extra_typings = require("@commander-js/extra-typings");
var import_context = require("../bundler/context.js");
var import_configure = require("./configure.js");
var import_dev = require("./lib/dev.js");
var import_command = require("./lib/command.js");
var import_deploy2 = require("./lib/deploy2.js");
var import_utils = require("./lib/utils/utils.js");
var import_deployment = require("./lib/deployment.js");
var import_run = require("./lib/run.js");
var import_convexImport = require("./lib/convexImport.js");
var import_convexExport = require("./lib/convexExport.js");
var import_logs = require("./lib/logs.js");
var import_functionSpec = require("./lib/functionSpec.js");
var import_data = require("./lib/data.js");
var import_env = require("./lib/env.js");
const selfHost = new import_extra_typings.Command("self-host");
selfHost.command("dev").summary("Develop against a deployment, watching for changes").description(
  "Develop against a deployment, watching for changes\n\n  1. Connects to a deployment with the provided url and admin key\n  2. Updates generated types and pushes code to the configured dev deployment\n  3. Runs the provided function (if `--run` is used)\n  4. Watches for file changes, and repeats step 2\n"
).allowExcessArguments(false).addDevOptions().addSelfHostOptions().action(async (cmdOptions) => {
  const ctx = (0, import_context.oneoffContext)();
  process.on("SIGINT", async () => {
    (0, import_context.logVerbose)(ctx, "Received SIGINT, cleaning up...");
    await ctx.flushAndExit(-2);
  });
  const devOptions = await (0, import_command.normalizeDevOptions)(ctx, cmdOptions);
  const credentials = await selfHostCredentials(ctx, true, cmdOptions);
  await (0, import_configure.handleManuallySetUrlAndAdminKey)(ctx, {
    url: credentials.url,
    adminKey: credentials.adminKey
  });
  await (0, import_dev.devAgainstDeployment)(ctx, credentials, devOptions);
});
selfHost.command("deploy").summary("Deploy to your deployment").description(
  "Deploy to your deployment.\n\nUnlike other `npx convex self-host` commands, `npx convex self-host deploy` does not automatically look in .env or .env.local files for url and admin key environment variables."
).allowExcessArguments(false).addDeployOptions().addSelfHostOptions().action(async (cmdOptions) => {
  const ctx = (0, import_context.oneoffContext)();
  const credentials = await selfHostCredentials(ctx, false, cmdOptions);
  await (0, import_deploy2.deployToDeployment)(ctx, credentials, cmdOptions);
});
async function getConfiguredCredentialsFromEnvVar(ctx, envPath, includeDefaultEnv) {
  if (envPath) {
    dotenv.config({ path: envPath });
  }
  if (includeDefaultEnv) {
    dotenv.config({ path: import_utils.ENV_VAR_FILE_PATH });
    dotenv.config();
  }
  if (process.env[import_deployment.CONVEX_DEPLOYMENT_VAR_NAME]) {
    return await ctx.crash({
      exitCode: 1,
      errorType: "fatal",
      printedMessage: `Cloud-hosted deployment "${process.env[import_deployment.CONVEX_DEPLOYMENT_VAR_NAME]}" is already set.
      For self-hosted deployments via \`npx convex self-host\`, unset the "${import_deployment.CONVEX_DEPLOYMENT_VAR_NAME}" environment variable.`
    });
  }
  if (process.env[import_utils.CONVEX_DEPLOY_KEY_ENV_VAR_NAME]) {
    return await ctx.crash({
      exitCode: 1,
      errorType: "fatal",
      printedMessage: `Cloud-hosted deploy key is already set.
      For self-hosted deployments via \`npx convex self-host\`, unset the "${import_utils.CONVEX_DEPLOY_KEY_ENV_VAR_NAME}" environment variable.`
    });
  }
  const url = process.env[import_utils.CONVEX_SELF_HOST_URL_VAR_NAME];
  const adminKey = process.env[import_utils.CONVEX_SELF_HOST_ADMIN_KEY_VAR_NAME];
  return { url, adminKey };
}
async function selfHostCredentials(ctx, includeDefaultEnv, cmdOptions) {
  const envVarCredentials = await getConfiguredCredentialsFromEnvVar(
    ctx,
    cmdOptions.env,
    includeDefaultEnv
  );
  const urlOverride = cmdOptions.url ?? envVarCredentials.url;
  const adminKeyOverride = cmdOptions.adminKey ?? envVarCredentials.adminKey;
  if (urlOverride !== void 0 && adminKeyOverride !== void 0) {
    return { url: urlOverride, adminKey: adminKeyOverride };
  }
  return await ctx.crash({
    exitCode: 1,
    errorType: "fatal",
    printedMessage: `Connect to self-hosted deployment with a url and admin key, via flags --url and --admin-key, or environment variables "${import_utils.CONVEX_SELF_HOST_URL_VAR_NAME}" and "${import_utils.CONVEX_SELF_HOST_ADMIN_KEY_VAR_NAME}"`
  });
}
selfHost.command("run").description("Run a function (query, mutation, or action) on your deployment").allowExcessArguments(false).addRunOptions().addSelfHostOptions().showHelpAfterError().action(async (functionName, argsString, options) => {
  const ctx = (0, import_context.oneoffContext)();
  const { adminKey, url: deploymentUrl } = await selfHostCredentials(
    ctx,
    true,
    options
  );
  await (0, import_run.runInDeployment)(ctx, {
    deploymentUrl,
    adminKey,
    functionName,
    argsString: argsString ?? "{}",
    componentPath: options.component,
    identityString: options.identity,
    push: !!options.push,
    watch: !!options.watch,
    typecheck: options.typecheck,
    typecheckComponents: options.typecheckComponents,
    codegen: options.codegen === "enable",
    liveComponentSources: !!options.liveComponentSources
  });
});
selfHost.command("import").summary("Import data from a file to your deployment").description(
  "Import data from a file to your Convex deployment.\n\n  From a snapshot: `npx convex import snapshot.zip`\n  For a single table: `npx convex import --table tableName file.json`"
).allowExcessArguments(false).addImportOptions().addSelfHostOptions().showHelpAfterError().action(async (filePath, options) => {
  const ctx = (0, import_context.oneoffContext)();
  const { adminKey, url: deploymentUrl } = await selfHostCredentials(
    ctx,
    true,
    options
  );
  await (0, import_convexImport.importIntoDeployment)(ctx, filePath, {
    ...options,
    deploymentUrl,
    adminKey,
    deploymentNotice: "",
    snapshotImportDashboardLink: void 0
  });
});
selfHost.command("export").summary("Export data from your deployment to a ZIP file").description(
  "Export data, and optionally file storage, from your Convex deployment to a ZIP file."
).allowExcessArguments(false).addExportOptions().addSelfHostOptions().showHelpAfterError().action(async (options) => {
  const ctx = (0, import_context.oneoffContext)();
  const { adminKey, url: deploymentUrl } = await selfHostCredentials(
    ctx,
    true,
    options
  );
  await (0, import_convexExport.exportFromDeployment)(ctx, {
    ...options,
    deploymentUrl,
    adminKey,
    deploymentNotice: "",
    snapshotExportDashboardLink: void 0
  });
});
async function selfHostEnvDeployment(ctx, options) {
  const deployment = await selfHostCredentials(ctx, true, options);
  return {
    deploymentUrl: deployment.url,
    adminKey: deployment.adminKey,
    deploymentNotice: ""
  };
}
const envSet = new import_extra_typings.Command("set").usage("[options] <name> <value>").arguments("<name> [value]").summary("Set a variable").description(
  "Set a variable: `npx convex env set NAME value`\nIf the variable already exists, its value is updated.\n\nA single `NAME=value` argument is also supported."
).configureHelp({ showGlobalOptions: true }).allowExcessArguments(false).action(async (originalName, originalValue, _options, cmd) => {
  const options = cmd.optsWithGlobals();
  const ctx = (0, import_context.oneoffContext)();
  const deployment = await selfHostEnvDeployment(ctx, options);
  await (0, import_env.envSetInDeployment)(ctx, deployment, originalName, originalValue);
});
const envGet = new import_extra_typings.Command("get").arguments("<name>").summary("Print a variable's value").description("Print a variable's value: `npx convex env get NAME`").configureHelp({ showGlobalOptions: true }).allowExcessArguments(false).action(async (envVarName, _options, cmd) => {
  const ctx = (0, import_context.oneoffContext)();
  const options = cmd.optsWithGlobals();
  const deployment = await selfHostEnvDeployment(ctx, options);
  await (0, import_env.envGetInDeployment)(ctx, deployment, envVarName);
});
const envRemove = new import_extra_typings.Command("remove").alias("rm").alias("unset").arguments("<name>").summary("Unset a variable").description(
  "Unset a variable: `npx convex env remove NAME`\nIf the variable doesn't exist, the command doesn't do anything and succeeds."
).configureHelp({ showGlobalOptions: true }).allowExcessArguments(false).action(async (name, _options, cmd) => {
  const ctx = (0, import_context.oneoffContext)();
  const options = cmd.optsWithGlobals();
  const deployment = await selfHostEnvDeployment(ctx, options);
  await (0, import_env.envRemoveInDeployment)(ctx, deployment, name);
});
const envList = new import_extra_typings.Command("list").summary("List all variables").description("List all variables: `npx convex env list`").configureHelp({ showGlobalOptions: true }).allowExcessArguments(false).action(async (_options, cmd) => {
  const ctx = (0, import_context.oneoffContext)();
  const options = cmd.optsWithGlobals();
  const deployment = await selfHostEnvDeployment(ctx, options);
  await (0, import_env.envListInDeployment)(ctx, deployment);
});
selfHost.command("env").summary("Set and view environment variables").description(
  "Set and view environment variables on your deployment\n\n  Set a variable: `npx convex env set NAME value`\n  Unset a variable: `npx convex env remove NAME`\n  List all variables: `npx convex env list`\n  Print a variable's value: `npx convex env get NAME`"
).addCommand(envSet).addCommand(envGet).addCommand(envRemove).addCommand(envList).addHelpCommand(false).addSelfHostOptions();
selfHost.command("data").summary("List tables and print data from your database").description(
  "Inspect your Convex deployment's database.\n\n  List tables: `npx convex data`\n  List documents in a table: `npx convex data tableName`"
).allowExcessArguments(false).addDataOptions().addSelfHostOptions().showHelpAfterError().action(async (tableName, options) => {
  const ctx = (0, import_context.oneoffContext)();
  const credentials = await selfHostCredentials(ctx, true, options);
  await (0, import_data.dataInDeployment)(ctx, {
    deploymentUrl: credentials.url,
    adminKey: credentials.adminKey,
    deploymentNotice: "",
    tableName,
    ...options
  });
});
selfHost.command("function-spec").summary("List function metadata from your deployment").description("List argument and return values to your Convex functions.").allowExcessArguments(false).addOption(new import_extra_typings.Option("--file", "Output as JSON to a file.")).addSelfHostOptions().showHelpAfterError().action(async (options) => {
  const ctx = (0, import_context.oneoffContext)();
  const credentials = await selfHostCredentials(ctx, true, options);
  await (0, import_functionSpec.functionSpecForDeployment)(ctx, {
    deploymentUrl: credentials.url,
    adminKey: credentials.adminKey,
    file: !!options.file
  });
});
selfHost.command("logs").summary("Watch logs from your deployment").description("Stream function logs from your Convex deployment.").allowExcessArguments(false).addLogsOptions().addSelfHostOptions().showHelpAfterError().action(async (cmdOptions) => {
  const ctx = (0, import_context.oneoffContext)();
  const credentials = await selfHostCredentials(ctx, true, cmdOptions);
  await (0, import_logs.logsForDeployment)(ctx, credentials, {
    history: cmdOptions.history,
    success: cmdOptions.success,
    deploymentNotice: ""
  });
});
//# sourceMappingURL=selfHost.js.map
