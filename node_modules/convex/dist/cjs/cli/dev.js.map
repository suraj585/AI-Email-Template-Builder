{
  "version": 3,
  "sources": ["../../../src/cli/dev.ts"],
  "sourcesContent": ["import { Command, Option } from \"@commander-js/extra-typings\";\nimport { logVerbose, oneoffContext } from \"../bundler/context.js\";\nimport { deploymentCredentialsOrConfigure } from \"./configure.js\";\nimport { checkAuthorization, performLogin } from \"./lib/login.js\";\nimport { usageStateWarning } from \"./lib/usage.js\";\nimport { normalizeDevOptions } from \"./lib/command.js\";\nimport { devAgainstDeployment } from \"./lib/dev.js\";\n\nexport const dev = new Command(\"dev\")\n  .summary(\"Develop against a dev deployment, watching for changes\")\n  .description(\n    \"Develop against a dev deployment, watching for changes\\n\\n\" +\n      \"  1. Configures a new or existing project (if needed)\\n\" +\n      \"  2. Updates generated types and pushes code to the configured dev deployment\\n\" +\n      \"  3. Runs the provided function (if `--run` is used)\\n\" +\n      \"  4. Watches for file changes, and repeats step 2\\n\",\n  )\n  .allowExcessArguments(false)\n  .addDevOptions()\n  .addOption(\n    new Option(\n      \"--configure [choice]\",\n      \"Ignore existing configuration and configure new or existing project, interactively or set by --team <team_slug>, --project <project_slug>, and --dev-deployment local|cloud\",\n    )\n      .choices([\"new\", \"existing\"] as const)\n      .conflicts([\"--local\", \"--cloud\"]),\n  )\n  .addOption(\n    new Option(\n      \"--team <team_slug>\",\n      \"The team you'd like to use for this project\",\n    ).hideHelp(),\n  )\n  .addOption(\n    new Option(\n      \"--project <project_slug>\",\n      \"The name of the project you'd like to configure\",\n    ).hideHelp(),\n  )\n  .addOption(\n    new Option(\n      \"--dev-deployment <mode>\",\n      \"Use a local or cloud deployment for dev for this project\",\n    )\n      .choices([\"cloud\", \"local\"] as const)\n      .conflicts([\"--prod\"])\n      .hideHelp(),\n  )\n  .addOption(\n    new Option(\n      \"--prod\",\n      \"Develop live against this project's production deployment.\",\n    )\n      .default(false)\n      .hideHelp(),\n  )\n  .addOption(new Option(\"--skip-push\").default(false).hideHelp())\n  .addOption(new Option(\"--admin-key <adminKey>\").hideHelp())\n  .addOption(new Option(\"--url <url>\").hideHelp())\n  // Options for testing\n  .addOption(new Option(\"--override-auth-url <url>\").hideHelp())\n  .addOption(new Option(\"--override-auth-client <id>\").hideHelp())\n  .addOption(new Option(\"--override-auth-username <username>\").hideHelp())\n  .addOption(new Option(\"--override-auth-password <password>\").hideHelp())\n  .addOption(new Option(\"--local-cloud-port <port>\").hideHelp())\n  .addOption(new Option(\"--local-site-port <port>\").hideHelp())\n  .addOption(new Option(\"--local-backend-version <version>\").hideHelp())\n  .addOption(new Option(\"--local-force-upgrade\").default(false).hideHelp())\n  .addOption(new Option(\"--partition-id <id>\").hideHelp())\n  .addOption(\n    new Option(\n      \"--local\",\n      \"Use local deployment regardless of last used backend. DB data will not be downloaded from any cloud deployment.\",\n    )\n      .default(false)\n      .conflicts([\"--prod\", \"--url\", \"--admin-key\", \"--cloud\"])\n      .hideHelp(),\n  )\n  .addOption(\n    new Option(\n      \"--cloud\",\n      \"Use cloud deployment regardles of last used backend. DB data will not be uploaded from local.\",\n    )\n      .default(false)\n      .conflicts([\"--prod\", \"--url\", \"--admin-key\", \"--local\"])\n      .hideHelp(),\n  )\n  .showHelpAfterError()\n  .action(async (cmdOptions) => {\n    const ctx = oneoffContext();\n    process.on(\"SIGINT\", async () => {\n      logVerbose(ctx, \"Received SIGINT, cleaning up...\");\n      await ctx.flushAndExit(-2);\n    });\n\n    const devOptions = await normalizeDevOptions(ctx, cmdOptions);\n\n    if (cmdOptions.configure === undefined) {\n      if (cmdOptions.team || cmdOptions.project || cmdOptions.devDeployment)\n        return await ctx.crash({\n          exitCode: 1,\n          errorType: \"fatal\",\n          printedMessage:\n            \"`--team, --project, and --dev-deployment can can only be used with `--configure`.\",\n        });\n    }\n\n    const localOptions: {\n      ports?: { cloud: number; site: number };\n      backendVersion?: string | undefined;\n      forceUpgrade: boolean;\n    } = { forceUpgrade: false };\n    if (!cmdOptions.local && cmdOptions.devDeployment !== \"local\") {\n      if (\n        cmdOptions.localCloudPort !== undefined ||\n        cmdOptions.localSitePort !== undefined ||\n        cmdOptions.localBackendVersion !== undefined ||\n        cmdOptions.localForceUpgrade === true\n      ) {\n        return await ctx.crash({\n          exitCode: 1,\n          errorType: \"fatal\",\n          printedMessage:\n            \"`--local-*` options can only be used with `--configure --dev-deployment local` or `--local`.\",\n        });\n      }\n    } else {\n      if (cmdOptions.localCloudPort !== undefined) {\n        if (cmdOptions.localSitePort === undefined) {\n          return await ctx.crash({\n            exitCode: 1,\n            errorType: \"fatal\",\n            printedMessage:\n              \"`--local-cloud-port` requires `--local-site-port` to be set.\",\n          });\n        }\n        localOptions[\"ports\"] = {\n          cloud: parseInt(cmdOptions.localCloudPort),\n          site: parseInt(cmdOptions.localSitePort),\n        };\n      }\n      localOptions[\"backendVersion\"] = cmdOptions.localBackendVersion;\n      localOptions[\"forceUpgrade\"] = cmdOptions.localForceUpgrade;\n    }\n\n    if (!cmdOptions.url || !cmdOptions.adminKey) {\n      if (!(await checkAuthorization(ctx, false))) {\n        await performLogin(ctx, cmdOptions);\n      }\n    }\n\n    const partitionId = cmdOptions.partitionId\n      ? parseInt(cmdOptions.partitionId)\n      : undefined;\n    const configure =\n      cmdOptions.configure === true ? \"ask\" : (cmdOptions.configure ?? null);\n    const credentials = await deploymentCredentialsOrConfigure(\n      ctx,\n      configure,\n      {\n        ...cmdOptions,\n        localOptions,\n      },\n      partitionId,\n    );\n\n    await usageStateWarning(ctx);\n\n    if (cmdOptions.skipPush) {\n      return;\n    }\n\n    await devAgainstDeployment(ctx, credentials, devOptions);\n  });\n"],
  "mappings": "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",
  "names": []
}
